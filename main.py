import re
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    CallbackContext,
    Updater,
    PicklePersistence,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackQueryHandler,
)
from cred import TOKEN
from menu import main_menu_keyboard, dopinfo_menu_keyboard
from key_buttons import button, dop_button
from pars import *

def start(update:  Update, context: CallbackContext):
    context.bot.send_sticker(
        chat_id = update.effective_chat.id,
        sticker = 'CAACAgQAAxkBAAEFQolizpgJnmLj3z9BJoi55JWfuIYeOwACDhUAAtqjlSzTnxMVjfioWCkE'
        )
    update.message.reply_text(
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}'.format(
            username=update.effective_user.first_name \
                if update.effective_user.first_name is not None \
                    else update.effective_user
        ),
        reply_markup=main_menu_keyboard()             
    )

def back(update:  Update, context: CallbackContext):
    update.message.reply_text(
        '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üôÇ',
        reply_markup=main_menu_keyboard()             
    )
            
KRIPTO_WHAT = r'(?=('+(button[0])+r'))'
KRIPTO = r'(?=('+(button[1])+r'))'
BUY = r'(?=('+(button[2])+r'))'
OTZUV = r'(?=('+(button[3])+r'))'
DOPINFO = r'(?=('+(button[4])+r'))'


NFT = r'(?=('+(dop_button[0])+r'))'
META = r'(?=('+(dop_button[1])+r'))'
MAYNING = r'(?=('+(dop_button[2])+r'))'
BLOCK = r'(?=('+(dop_button[3])+r'))'
BACK = r'(?=('+(dop_button[4])+r'))'


def otpravit_otzuv(update: Update, context: CallbackContext):
    context.bot.send_sticker(
        chat_id = update.effective_chat.id,
        sticker = 'CAACAgQAAxkBAAEFQotizpnXHCD5GjmgZbxdIoe-Ln-BoQACHBUAAtqjlSzC9x8osVawrCkE'
        )
    a = update.message.text
    if a[:5] == '–û—Ç–∑—ã–≤':
        context.bot.send_message(
            chat_id= '@kkrriippttoo',
            text = a,
        )

def otzuv(update: Update, context: CallbackContext):
    info = re.match(OTZUV, update.message.text)
    update.message.reply_text(
    text = """
–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å "–û—Ç–∑—ã–≤: " –∏ –æ—Å—Ç–∞–≤—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤üôÇ
""",
    reply_markup=main_menu_keyboard()
 )

def resive_what_menu(update:Update, context: CallbackContext):
    update.message.reply_text(
        '''
        üü† –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ‚Äì —ç—Ç–æ –ª—é–±–æ–π –≤–∏–¥ –≤–∞–ª—é—Ç—ã –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–π –∏–ª–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ; –¥–ª—è –∑–∞—â–∏—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (–∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è). –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –æ—Ä–≥–∞–Ω–∞ –ø–æ –≤—ã–ø—É—Å–∫—É –∏–ª–∏ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –î–ª—è –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –≤—ã–ø—É—Å–∫–∞ –Ω–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞.
        ''',
        reply_markup=main_menu_keyboard()
    )

def buy(update: Update, context: CallbackContext):
    update.message.reply_text('https://coinmarketcap.com/')

def resive_dop_menu(update:Update, context: CallbackContext):
    update.message.reply_text(
        '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üëç',
        reply_markup= dopinfo_menu_keyboard()
    )

def nft(update: Update, context: CallbackContext):
    context.bot.sendPhoto(
        update.effective_chat.id,
        photo = open('img/nft.jpg', 'rb'),
        caption = '''
        üü¢ NFT (Non-fungible token) ‚Äî —ç—Ç–æ –Ω–µ–≤–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º—ã–π —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π ¬´–ø—Ä–∏–≤—è–∑–∞–Ω¬ª –∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É, —ç—Ç–∏–º –æ–±—ä–µ–∫—Ç–æ–º –º–æ–∂–µ—Ç –±—ã—Ç—å: —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –∫–∞—Ä—Ç–∏–Ω–∞, –≥–∏—Ñ–∫–∞, –≤–∏–¥–µ–æ, –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫, –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤ –∏–≥—Ä–µ –∏ —Ç. –ø. —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        ''',
        reply_markup= dopinfo_menu_keyboard()
    )

def meta(update: Update, context: CallbackContext):
    context.bot.sendPhoto(
        update.effective_chat.id,
        photo = open('img/metaverce.jpg', 'rb'),
        caption = '''
        üü¢ –ú–∏—Ä, —Å–æ—á–µ—Ç–∞—é—â–∏–π –≤ —Å–µ–±–µ ¬´–Ω–∞—Å—Ç–æ—è—â—É—é¬ª –∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å, —Å–µ–π—á–∞—Å –ø—Ä–∏–Ω—è—Ç–æ –Ω–∞–∑—ã–≤–∞—Ç—å –º–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω–æ–π.–ú–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω–∞—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –∏ —Ü–∏—Ñ—Ä–æ–≤–æ–π –º–∏—Ä—ã, –æ—Ç–∫—Ä—ã—Ç—ã–µ –∏ –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, —á–∞—Å—Ç–Ω—ã–µ –∏ –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ç–∏.
        ''',
        reply_markup= dopinfo_menu_keyboard()
    )

def majning(update: Update, context: CallbackContext):
    context.bot.sendPhoto(
        update.effective_chat.id,
        photo = open('img/majning.jpg', 'rb'),
        caption = '''
        üü¢ –ú–∞–π–Ω–∏–Ω–≥ ‚Äì —ç—Ç–æ –¥–æ–±—ã—á–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã —Å –ø–æ–º–æ—â—å—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –ï—Å–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ —è–∑—ã–∫–µ –±–ª–æ–∫—á–µ–π–Ω-–∏–Ω–∂–µ–Ω–µ—Ä–æ–≤, –º–∞–π–Ω–∏–Ω–≥ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ö—Ä–∞–Ω–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö. –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–Ω–∏ –æ–±—Ä–∞–∑—É—é—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–ø–æ—á–∫—É ‚Äì –±–ª–æ–∫—á–µ–π–Ω.
        ''',
        reply_markup= dopinfo_menu_keyboard()
    )

def block(update: Update, context: CallbackContext):
    context.bot.sendPhoto(
        update.effective_chat.id,
        photo = open('img/block.jpg', 'rb'),
        caption = '''
        üü¢ –ï—Å–ª–∏ —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Å–ª–æ–∂–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –∏ –≤—ã—Å–∫–∞–∑–∞—Ç—å—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º —è–∑—ã–∫–æ–º, —Ç–æ –±–ª–æ–∫—á–µ–π–Ω ‚Äì —ç—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤—ã—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è, –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è —Å–≤—è–∑–∫–∞ –±–ª–æ–∫–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        ''',
        reply_markup= dopinfo_menu_keyboard()
    )

updater = Updater(TOKEN, persistence=PicklePersistence(filename='bot-data'))
updater.dispatcher.add_handler(CommandHandler('start',start))

updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(KRIPTO_WHAT),
    resive_what_menu
))

updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(KRIPTO),
    top
))

updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(BUY),
    buy
))

updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(DOPINFO),
    resive_dop_menu
))

updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(NFT),
    nft
))

updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(META),
    meta
))

updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(MAYNING),
    majning
))

updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(BLOCK),
    block
))

updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(BACK),
    back
))

updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(OTZUV),
    otzuv
))

updater.dispatcher.add_handler(MessageHandler(
    Filters.text,
    otpravit_otzuv,
))


updater.dispatcher.add_handler(CallbackQueryHandler(button))
updater.start_polling()
updater.idle()